library(ggplot2)
library(dplyr)
library(dynlm)
install.packages("dynlm")
library(zoo)
library(dynlm)
library(dynlm)
library(dlnm)
install.packages("dlnm")
library(dlnm)
library(lmtest) #DW,LR
library(aTSA) #adf.test
install.packages("aTSA")
library(aTSA) #adf.test
taylordt <- read.csv("tsdf.csv")
taylordt <- taylordt[-53,-1]
polratets1 <- ts(taylordt$polratets, start = c(2006, 1), frequency = 4)
Date = as.yearqtr(time(polratets1))
taylordt$Date <- Date
taylordt$polratets <- ts(taylordt$polratets, start = c(2006), frequency = 4)
taylordt$lrpolrate <- ts(taylordt$lrpolrate, start = c(2006), frequency = 4)
taylordt$inflts <- ts(taylordt$inflts, start = c(2006), frequency = 4)
taylordt$infgap <- ts(taylordt$infgap, start = c(2006), frequency = 4)
taylordt$gdpts <- ts(taylordt$gdpts, start = c(2006), frequency = 4)
taylordt$gdppot <- ts(taylordt$gdppot, start = c(2006), frequency = 4)
taylordt$exchgts <- ts(taylordt$exchgts, start = c(2006), frequency = 4)
str(taylordt)
ggplot(taylordt, aes(x=Date, y = polratets))+
geom_line(size=0.75)+
geom_line(aes(x=Date, y = infgap, col = "blue"))+
geom_line(aes(x=Date, y = log(gdpts)-log(gdppot), col = "green"))+
xlab("Time") + ylab(" ")+
scale_x_yearqtr(format = "%YQ%q")+
geom_text(aes(x = Date[51], y = 7, label = "Policy rate")) +
geom_text(aes(x = Date[50], y = -6, label = "GDP gap (log)", color = "blue"))+
geom_text(aes (x = Date[50], y = 1, label = "Inflation gap", color = "green"))+
theme(legend.position = "None")
taylorpolrate1 <- 1.5 * (taylordt$infgap) + 0.5 * (log(taylordt$gdpts)-log(taylordt$gdppot))
taylorpolrate2 <- taylordt$lrpolrate +taylordt$inflts + 1.5 * (taylordt$infgap) + 0.5 * (log(taylordt$gdpts)-log(taylordt$gdppot))
ggplot(taylordt, aes(x=Date, y = polratets))+
geom_line(size=0.75)+
geom_line(aes(x=Date, y = taylorpolrate1, col = "blue"))+
geom_line(aes(x=Date, y = taylorpolrate2, col = "green"))+
xlab("Time") + ylab(" % ")+
scale_x_yearqtr(format = "%YQ%q")+
geom_text(aes(x = Date[49], y = 8, label = "Actual policy rate")) +
geom_text(aes(x = Date[51], y = -4, label = "Rule 1", color = "blue"))+
geom_text(aes (x = Date[51], y = 2.5, label = "Rule 2", color = "green"))+
theme(legend.position = "None")
#Date[!taylorpolrate2<=taylordt$polratets]
reg_predict<-function(Data){
Data$model <- factor(paste(Data$brand,Data$model))
load("my_model1.rda")
price<-exp(predict(model,Data))
print(paste("Estimatet price is ",price))
}
data1<-read.csv("regression.csv")
data1$price<-NULL
z<-data1[1]
reg_predict(z)
reg_predict<-function(Data){
Data$model <- factor(paste(Data$brand,Data$model))
load("my_model1.rda")
price<-exp(predict(model,Data))
print(paste("Estimatet price is ",price))
}
data1<-read.csv("regression.csv")
data1$price<-NULL
z<-data1[1]
reg_predict(z)
reg_predict<-function(Data){
Data$model <- factor(paste(Data$brand,Data$model))
load("my_model1.rda")
price<-exp(predict(model,Data))
print(paste("Estimatet price is ",price))
}
data1<-read.csv("regression.csv")
data1$price<-NULL
z<-data1[1]
reg_predict(z)
library(ggplot2)
library(ggcorrplot)
library(dplyr)
Data<-read.csv("regression.csv")
only_num<-dplyr::select_if(Data, is.numeric)
ggcorrplot(cor(only_num), hc.order = TRUE, type = "lower",
lab = TRUE)##first plot.
only_num$Engine_Volume<-NULL
ggcorrplot(cor(only_num), hc.order = TRUE, type = "lower",
lab = TRUE)##second plot.
only_num$Engine_Volume<-NULL
ggcorrplot(cor(only_num), hc.order = TRUE, type = "lower",
lab = TRUE)
library(nortest)
data<-read.csv("final2.csv")
ad.test(data$price)
#shapiro.test(Data$price)
shapiro.test(Data[Data$sold=="Yes","price"])
var.test(Data[Data$sold=="Yes","price"], y = Data[Data$sold=="No","price"])
t.test(Data[Data$sold=="Yes","price"], y = Data[Data$sold=="No","price"],alternative = "greater",var.equal = F,
conf.level = 0.95)
wilcox.test(data[data$sold=="Yes","price"], y = data[Data$sold=="No","price"],alternative = "greater")
Data$model <- factor(paste(Data$brand,Data$model))
Data$model<-relevel(Data$model,ref = 'Mercedes-Benz E 320 ')
set.seed(1)
index<-sample(nrow(Data),nrow(Data)*.75,replace = F)
train<-Data[index,]#split done
test<-Data[-index,]#
model<-lm(log(price)~model+year+Horsepower+Hand_Drive+Engine_Cylinders+Engine+Interior_Color
+log(Mileage)+Gearbox+Drive_train,data = Data)
summary(model)
summary(model)
z<-summary(model)
summary_dt<-data.frame(coef=z$coefficients[,1],standard_error=z$coefficients[,2],T_value=z$coefficients[,3],P_value=z$coefficients[,4])
save(model, file = "my_model1.rda")
train_mod<-lm(log(price)~model+year+Horsepower+Hand_Drive+Engine_Cylinders+Engine+Interior_Color+log(Mileage)+Gearbox+Drive_train,data = train)
test_pred<-exp(predict(train_mod,test))
rmse(test$price,test_pred)
library(Metrics)
rmse(test$price,test_pred)
str(data)
str(Data)
table(Data)
str(Data)
table(Data)
dim(Data)
ggplot()+geom_point(aes(model$fitted.values,model$residuals))+geom_abline(intercept = 0,slope = 0,size=2,color='blue')+labs(title="Residuals vs Fitted Values",y="residuals",x='Fitted Values')
qqnorm(model6$residuals);qqline(model6$residuals)
qqnorm(model$residuals);qqline(model$residuals)
shapiro.test(model$residuals)
bptest(model)
library(lmtest)
bptest(model)
load("my_model1.rda")
ggplot()+geom_point(aes(model$fitted.values,model$residuals))+geom_abline(intercept = 0,slope = 0,size=2,color='blue')+labs(title="Residuals vs Fitted Values",y="residuals",x='Fitted Values')
qqnorm(model$residuals);qqline(model$residuals)
ggplot()+geom_point(aes(model$fitted.values,model$residuals))+geom_abline(intercept = 0,slope = 0,size=2,color='blue')+labs(title="Residuals vs Fitted Values",y="residuals",x='Fitted Values')
library(ggplot2)
ggplot()+geom_point(aes(model$fitted.values,model$residuals))+geom_abline(intercept = 0,slope = 0,size=2,color='blue')+labs(title="Residuals vs Fitted Values",y="residuals",x='Fitted Values')
qqnorm(model$residuals);qqline(model$residuals)
library(reticulate)
reticulate::repl_python()
import utils
import utils
exit
data<-read.csv("final2.csv")
data[1,]
z<-data[1,]
py$utils$predict(z)
z$id_val<-NULL
z$date<-NULL
py$utils$predict(z)
reticulate::repl_python()
import pandas as pd
data2=pd.read_csv("final2.csv")
z=data[1:2].copy()
z=data2[1:2].copy()
z["price"]=2500
utils.tree_predict(z)
import utils
import pandas as pd
data2=pd.read_csv("final2.csv")
z=data2[1:2].copy()
z["price"]=2500
utils.tree_predict(z)
tree_predict(z)
tree_predict(z)
utils::tree_predict(z)
utils.tree_predict(z)
import utils
from  utils import tree_predict
reticulate::repl_python()
library(reticulate)
reticulate::repl_python()
import utils
exit
data<-read.csv("final2.csv")
z<-data[1,]
z$id_val<-NULL
z$date<-NULL
py$utils$predict(z)
reticulate::repl_python()
from  utils import tree_predict
import utils
library(reticulate)
reticulate::repl_python()
import utils
exit
data<-read.csv("final2.csv")
z<-data[1,]
z$id_val<-NULL
z$date<-NULL
py$utils$predict(z)
reticulate::repl_python()
from  utils import tree_predict
from  utils
import utils.py
import utils
import pandas as pd
data2=pd.read_csv("final2.csv")
z=data2[1:2].copy()
z["price"]=2500
utils.tree_predict(z)
library(reticulate)
library(reticulate)
import utils
from utils import tree_predict
tree_predict(z)
library(reticulate)
import utils
import pandas as pd
data2=pd.read_csv("final2.csv")
reticulate::repl_python()
from utils import tree_predict
import pandas as pd
data2=pd.read_csv("final2.csv")
z=data2[1:2].copy()
z["price"]=2500
tree_predict(z)
z
tree_predict(z)
exit
reticulate::repl_python()
from utils import tree_predict
import pandas as pd
data2=pd.read_csv("final2.csv")
z=data2[1:2].copy()
z["price"]=2500
tree_predict(z)
exit
reticulate::repl_python()
from utils import tree_predict
import pandas as pd
data2=pd.read_csv("final2.csv")
z=data2[1:2].copy()
z["price"]=2500
tree_predict(z)
data<-read.csv("final2.csv")
head(data)
data<-read.csv("final2.csv")
df<-data[ apply(data, 2, function(x) !any(is.na(x)))]
df$date<-NULL
df$id_val<-NULL
head(df)
data<-read.csv("final2.csv")
df<-data[ apply(data, 2, function(x) !any(is.na(x)))]
df$date<-NULL
df$id_val<-NULL
head(df)
data<-read.csv("final2.csv")
data<-data[ , colSums(is.na(data)) == 0]
#data<-data[data$model %in% names(which(table(data$model) > 35)), ]
data$brand<-NULL
#rm(list = ls())
#install.packages("rpart.plot")
library(caret)
library(ggplot2)
library(ISLR)
library(pROC)
library(rpart.plot)
library(ROCR)
library(pROC)
library(car)
data<-read.csv("final2.csv")
df<-data[ apply(data, 2, function(x) !any(is.na(x)))]
df$date<-NULL
df$id_val<-NULL
colnames(df)
head(df)
#data$Interior_Color<-NULL
#data$Drive_train<-NULL
fg$Body_Style<-NULL
#data$Interior_Color<-NULL
#data$Drive_train<-NULL
df$Body_Style<-NULL
colnames(df)
write.csv("tree.csv",x = df)
write.csv("tree.csv",x = df)
data<-read.csv("final2.csv")
df<-data[ apply(data, 2, function(x) !any(is.na(x)))]
df$date<-NULL
df$id_val<-NULL
head(df)
library(glmnet)
library(glmnetUtils)
library(caret)
library(dplyr)
library(reticulate)
library(ROCR)
library(pROC)
train_index<-createDataPartition(df$sold,p = 0.8,list = F)
train<-df[train_index,]
test<-df[-train_index,]
lambda=seq(from=0.02,to = 1,by=0.05)
library(glmnet)
set.seed(42)
myModel <- cv.glmnet(model.matrix(sold~.,data = train),train$sold,family = "binomial",nfolds = 5,alpha = 1,
lambda=lambda)
myModel$cvm
z<-predict(myModel,newx  = model.matrix(sold~.,data = test),type="response")
min(z)
model<-glmnet(model.matrix())
z1<-factor(ifelse(z>0.38,"Yes","No"))
aa<-ifelse(test$sold==
"Yes",1,0)
rrr<-roc(test$sold,z)
rrr
ggroc(roc_obj,alpha = 0.5, colour = "green", linetype = 1, size = 1)+ggtitle("ROC curve for Model AIC")
auc(rrr)
aa<-ifelse(test$sold==
"Yes",1,0)
rrr<-roc(test$sold,z)
z
rrr<-roc(test$sold,z)
rrr
ggroc(roc_obj,alpha = 0.5, colour = "green", linetype = 1, size = 1)+ggtitle("ROC curve for Model AIC")
ggroc(rrr,alpha = 0.5, colour = "green", linetype = 1, size = 1)+ggtitle("ROC curve for Model AIC")
auc(rrr)
coords(roc_obj, "best")
pred<-factor(ifelse(predictions[,2]>0.37,"Yes","No"))
confusionMatrix(z1,df$sold,positive = "Yes")
p_test<-prediction(z,test$sold)
perf <- performance(p_test,"tpr","fpr")
plot(perf,colorize=TRUE)
FPR<-unlist(perf@x.values)
TPR<-unlist(perf@y.values)
alpha<-unlist(perf@alpha.values)
df1<-data.frame(FPR,TPR,alpha)
ggplot(df1,aes(FPR,TPR,color=alpha))+geom_line(size=2)+geom_abline(slope = 1)+
ggtitle("ROC CURVE")+theme(plot.title = element_text(hjust = 0.5))+annotate("text", x = 0.8, y = 0.1, label = "AUC is 0.5901")
confusionMatrix(z1,df$sold,positive = "Yes")
confusionMatrix(z1,test$sold,positive = "Yes")
z
z<-predict(myModel,newx  = model.matrix(sold~.,data = test),type="response")
min(z)
model<-glmnet(model.matrix())
z1<-factor(ifelse(z>0.38,"Yes","No"))
aa<-ifelse(test$sold==
"Yes",1,0)
rrr<-roc(test$sold,z)
rrr
ggroc(rrr,alpha = 0.5, colour = "green", linetype = 1, size = 1)+ggtitle("ROC curve for Model AIC")
coords(roc_obj, "best")
predictions
confusionMatrix(z1,test$sold,positive = "Yes")
coords(roc_obj, "best"))
confusionMatrix(z1,test$sold,positive = "Yes")
coords(roc_obj, "best")
coords(rrr, "best")
coords(rrr, "best")
confusionMatrix(z1,test$sold,positive = "Yes")
z1<-factor(ifelse(z>0.31,"Yes","No"))
confusionMatrix(z1,test$sold,positive = "Yes")
z1<-factor(ifelse(z>0.5,"Yes","No"))
coords(rrr, "best")
confusionMatrix(z1,test$sold,positive = "Yes")
z1<-factor(ifelse(z>0.3,"Yes","No"))
confusionMatrix(z1,test$sold,positive = "Yes")
z1<-factor(ifelse(z>0.33,"Yes","No"))
confusionMatrix(z1,test$sold,positive = "Yes")
#rm(list = ls())
#install.packages("rpart.plot")
library(caret)
library(ggplot2)
library(ISLR)
library(pROC)
library(rpart.plot)
library(ROCR)
library(pROC)
library(car)
data<-read.csv("final2.csv")
table(data$Drive_train)
df<-data[ apply(data, 2, function(x) !any(is.na(x)))]
df$date<-NULL
df$id_val<-NULL
colnames(df)
data$Drive_train<-recode(data$Drive_train, "c('NaN', '')='Not Mentionded'")
data$Interior_Color<-recode(data$Interior_Color, "c('NaN', '')='Not Mentionded'")
head(df)
write.csv("final2.csv",x = data)
levels(data$Drive_train1) <-levels(data$Drive_train)
data$Drive_train[1:5]
#lseciq indz asec de menak es tenc chem, liqy mard a ira hamar aprum((((  u el chaseq vor tetev tanem(
table(data$Drive_train)
data<-data[ , colSums(is.na(data)) == 0]
levels(data$Color)
#######################################################################################
data$model<-paste(data$brand,data$model)
data<-data[data$model %in% names(which(table(data$model) > 35)), ]
#data$brand<-NULL
data$id_val<-NULL
#data$Interior_Color<-NULL
#data$Drive_train<-NULL
df$Body_Style<-NULL
data$date<-NULL
colnames(df)
write.csv("tree.csv",x = df)
set.seed(41)
train_index<-createDataPartition(data$sold,p = 0.8,list = F)
train<-data[train_index,]
test<-data[-train_index,]
table(data$model)
set.seed(42)
tree <- rpart(sold ~., data = train, method = "class", control = rpart.control(cp = 0, maxdepth = 30,minsplit = 100))
predictions <- predict(tree, test, type="prob")
roc_obj <- roc(test$sold, predictions[,2])
ggroc(roc_obj,alpha = 0.5, colour = "green", linetype = 1, size = 1)+ggtitle("ROC curve for Model AIC")
auc(roc_obj)
coords(roc_obj, "best")
pred<-factor(ifelse(predictions[,2]>0.35,"Yes","No"))
confusionMatrix(pred,test$sold,positive = "Yes")
data<-read.csv("final2.csv")
sapply(data, function(x) sum(is.na(x)))
factors<-c("brand","Color","Hand_Drive","Gear","Drive_train","sold")
#table(data$model)
#colnames(data)
library(ggplot2)
install.packages("plotly")
library(plotly)
only_num<-dplyr::select_if(data, is.numeric)
colnames(only_num)
plot_ly(data = data, x=data$Horsepower, y=log(data$price))
data<-read.csv("final2.csv")
sapply(data, function(x) sum(is.na(x)))
factors<-c("brand","Color","Hand_Drive","Gear","Drive_train","sold")
#table(data$model)
#colnames(data)
library(ggplot2)
install.packages("plotly")
install.packages("plotly")
library(plotly)
only_num<-dplyr::select_if(data, is.numeric)
colnames(only_num)
dim(data[data$Mileage>400000,])
summary(data$Mileage)
colnames(only_num)
#scatterplots1
ggplot(data,aes(Horsepower,Engine_Volume))+geom_point(alpha=0.1)+
labs(title = "Relationship between Engine volume and Horsepower",y="Engine Volume")+theme(plot.title = element_text(hjust = 0.5))
#scatterplots1
ggplot(data,aes(Price,Horsepower))+geom_point(alpha=0.1)+
labs(title = "Relationship between Engine volume and Horsepower",y="Engine Volume")+theme(plot.title = element_text(hjust = 0.5))
#scatterplots1
ggplot(data,aes(Price,Horsepower))+geom_point(alpha=0.1)+
labs(title = "Relationship between Engine volume and Horsepower",y="Engine Volume")+theme(plot.title = element_text(hjust = 0.5))
#scatterplots1
ggplot(data,aes(price,Horsepower))+geom_point(alpha=0.1)+
labs(title = "Relationship between Engine volume and Horsepower",y="Engine Volume")+theme(plot.title = element_text(hjust = 0.5))
#scatterplots1
ggplot(data,aes(price,Horsepower,color=GearBox))+geom_point(alpha=0.1)+
labs(title = "Relationship between Engine volume and Horsepower",y="Engine Volume")+theme(plot.title = element_text(hjust = 0.5))
#scatterplots1
ggplot(data,aes(price,Horsepower,color=Gearbox))+geom_point(alpha=0.1)+
labs(title = "Relationship between Engine volume and Horsepower",y="Engine Volume")+theme(plot.title = element_text(hjust = 0.5))
data<-read.csv("final2.csv")
plot<-data[data$brand %in% names(which(table(data$brand) > 100)), ]
ggplot(plot, aes(fill=sold, x=brand)) +
geom_bar(position="dodge")+theme(axis.text.x = element_text(angle = 45,hjust = 1))+ggtitle("Distribution of Sold Cars by Brands")+xlab("Brands")+
ylab("Number of cars")
df <- select(df, -c(1,2,3))
df <- read.csv("awards.csv")
df <- select(df, -c(1,2,3))
df <- read.csv("awards.csv")
df <- select(df, -c(1,2,3))
library(dplyr)
library(ggplot2)
data<-read.csv("final2.csv")
plot<-data[data$brand %in% names(which(table(data$brand) > 100)), ]
ggplot(plot, aes(fill=sold, x=brand)) +
geom_bar(position="dodge")+theme(axis.text.x = element_text(angle = 45,hjust = 1))+ggtitle("Distribution of Sold Cars by Brands")+xlab("Brands")+
ylab("Number of cars")
ggplot(plot, aes(fill=sold, x=brand)) +
geom_bar(position="dodge")+theme(axis.text.x = element_text(angle = 45,hjust = 1))+ggtitle("Distribution of Sold Cars by Brands")+xlab("Brands")+
ylab("Number of cars")+
theme(plot.title = element_text(hjust = 0.5))
data<-read.csv("final2.csv")
df<-data[ apply(data, 2, function(x) !any(is.na(x)))]
df$date<-NULL
df$id_val<-NULL
head(df)
library(glmnet)
library(glmnetUtils)
library(caret)
library(dplyr)
library(reticulate)
library(ROCR)
library(pROC)
train_index<-createDataPartition(df$sold,p = 0.8,list = F)
train<-df[train_index,]
test<-df[-train_index,]
lambda=seq(from=0.02,to = 1,by=0.05)
library(glmnet)
set.seed(42)
myModel <- cv.glmnet(model.matrix(sold~.,data = train),train$sold,family = "binomial",nfolds = 5,alpha = 1,
lambda=lambda)
myModel$cvm
z<-predict(myModel,newx  = model.matrix(sold~.,data = test),type="response")
min(z)
z1<-factor(ifelse(z>0.33,"Yes","No"))
aa<-ifelse(test$sold==
"Yes",1,0)
rrr<-roc(test$sold,z)
rrr
ggroc(rrr,alpha = 0.5, colour = "green", linetype = 1, size = 1)+ggtitle("ROC curve for Model AIC")
auc(rrr)
coords(rrr, "best")
confusionMatrix(z1,test$sold,positive = "Yes")
z1<-factor(ifelse(z>0.35,"Yes","No"))
aa<-ifelse(test$sold==
"Yes",1,0)
rrr<-roc(test$sold,z)
confusionMatrix(z1,test$sold,positive = "Yes")
