geom_line(aes(x=Time, y = r, color="#00AFBB"), size =1.2, alpha=0.5)+
scale_color_discrete(name = "Time series",labels = c("Policy rate", "Money market rate", "Gov. bond yield") )+
theme_minimal()
adf.test(dt.ts$r) #to appendix
adf.test(dt.ts$mmr) #to appendix
adf.test(dt.ts$gby) #to appendix
adf.test(dt.ts$r)[,1] #to appendix
```{r, include=FALSE}
```{r include=FALSE}
a1<-adf.test(dt.ts$r)[,1] #to appendix
a1$type1
a1<-adf.test(dt.ts$r) #to appendix
a1$type1
adf.test(dt.ts$mmr) #to appendix
a2 <- adf.test(dt.ts$mmr) #to appendix
adf.test(dt.ts$gby) #to appendix
a1$type1
a2$type1
a2$type2
desctable<-data.frame(
Variables = c("r", "mmr","gby"),
Process = c("I(0)","I(0)", "I(0)"),
Description = c("Monetary Policy rate (%)",
"Money market rate (%)",
"Short-term government bond yield")
)
kable(desctable)
#Creating the column date for ggplots
fordate <- ts(dt$r, start = c(2006, 1), frequency = 4)
Date = as.yearqtr(time(fordate))
dt.ts$Time <- Date
# Converting to ts
dt.ts <- dt
for (i in 2:ncol(dt)-1){
name <- names(dt)[i]
dt.ts[,as.character(name)] <- ts(dt[,as.character(name)],    start = 2001, frequency = 4)
}
# showing the result from
kable(rbind(head(dt,5)[,1:9], tail(dt,5)[,1:9]))
kable(rbind(head(dt,5)[,10:17], tail(dt,5)[,10:17]))
ggplot(data = dt.ts) +
geom_line(aes(x=Time, y = mmr, color="#E7B800"), size =1.2, alpha=0.5)+
geom_line(aes(x=Time, y = gby, color="#FC4E07"), size =1.2, alpha=0.5)+
geom_line(aes(x=Time, y = r, color="#00AFBB"), size =1.2, alpha=0.5)+
scale_color_discrete(name = "Time series",labels = c("Policy rate", "Money market rate", "Gov. bond yield") )+
theme_minimal()+ ylab("")
a4 <-adf.test(dt.ts$rl1)
a1<-adf.test(dt.ts$r) #to appendix
ggplot(data = dt.ts) +
geom_line(aes(x=Time, y = inf, color="#E7B800"), size =1.2, alpha=0.5)+
geom_line(aes(x=Time, y = core_inf, color="#FC4E07"), size =1.2, alpha=0.5)+
scale_color_discrete(name = "Time series",labels = c("CPI inflation", "Core CPI inflation"))+
theme_minimal()+ ylab("%")
ggplot(data = dt.ts) +
geom_line(aes(x=Time, y = inf, color="blue"), size =1.2, alpha=0.5)+
geom_line(aes(x=Time, y = core_inf, color="red"), size =1.2, alpha=0.5)+
scale_color_discrete(name = "Time series",labels = c("CPI inflation", "Core CPI inflation"))+
theme_minimal()+ ylab("%")
#FC4E07
ggplot(data = dt.ts) +
geom_line(aes(x=Time, y = inf, color="#E7B800"), size =1.2, alpha=0.5)+
geom_line(aes(x=Time, y = core_inf, color="#FC4E07"), size =1.2, alpha=0.5)+
scale_color_discrete(name = "Time series",labels = c("CPI inflation", "Core CPI inflation"))+
theme_minimal()+ ylab("%")
a5<-adf.test(dt.ts$inf) #to appendix
a6 <- adf.test(dt.ts$core_inf) #to appendix
a5
lm(dt.ts$inf ~ 1)
inflm <- lm(dt.ts$inf ~ 1)
inflm$coefficients
inflm$coefficients[1]
as.numeric(inflm$coefficients)
new <- dt.ts$inf - as.numeric(inflm$coefficients)
adf.test(new)
a5<-adf.test(dt.ts$inf) #to appendix
a6 <- adf.test(dt.ts$core_inf) #to appendix
inflm <- lm(dt.ts$inf ~ 1)
new <- dt.ts$inf - as.numeric(inflm$coefficients)
adf.test(new)
a5<-adf.test(dt.ts$inf) #to appendix
a5$type1
a6$type2
a6
a7 <- adf.test(diff(dt.ts$core_inf)) #to appendix
desctable2<-data.frame(
Variables = c("inf", "core_inf"),
Process = c("I(0)","I(0)"),
Description = c("CPI Inflation (%)",
"Core CPI Inflation (%)")
)
kable(desctable2)
library(gridExtra)
library(GGally)
library(ggpubr)
g1 <- ggplot(data = dt.ts) +
geom_line(aes(x=Time, y = gyqoq, color="#E7B800"), size =1.2, alpha=0.5)+
geom_line(aes(x=Time, y = gyoy, color="#FC4E07"), size =1.2, alpha=0.5)+
scale_color_discrete(name = "Time series",labels = c("Growth rate (quarter)", "Growth rate (year)"))+
theme_minimal()+ ylab("%")
g2 <- ggplot(data = dt.ts) +
geom_line(aes(x=Time, y = lngdp, color="#E7B800"), size =1.2, alpha=0.5)+
geom_line(aes(x=Time, y = trend, color="#FC4E07"), size =1.2, alpha=0.5)+
geom_line(aes(x=Time, y = xgap, color="#00AFBB"), size =1.2, alpha=0.5)+
scale_color_discrete(name = "Time series",labels = c("Policy rate", "Money market rate", "Gov. bond yield") )+
theme_minimal()+ ylab("%")
library(ggpubr)
ggarrange(g1,g2)
ggplot(data = dt.ts) +
geom_line(aes(x=Time, y = gyqoq, color="#E7B800"), size =1.2, alpha=0.5)+
geom_line(aes(x=Time, y = gyoy, color="#FC4E07"), size =1.2, alpha=0.5)+
scale_color_discrete(name = "Time series",labels = c("Growth rate (quarter)", "Growth rate (year)"))+
theme_minimal()+ ylab("%")
ggplot(data = dt.ts) +
geom_line(aes(x=Time, y = gyqoq, color="#E7B800"), size =1.2, alpha=0.5)
ggplot(data = dt.ts) +
geom_line(aes(x=Time, y = gyqoq, color="#E7B800"), size =1.2, alpha=0.5)+
geom_line(aes(x=Time, y = gyoy, color="#FC4E07"), size =1.2, alpha=0.5)+
scale_color_discrete(name = "Time series",labels = c("Growth rate (quarter)", "Growth rate (year)"))+
theme_minimal()+ ylab("%")
ggplot(data = dt.ts) +
geom_line(aes(x=Time, y = gyqoq, color="#E7B800"), size =1.2, alpha=0.5)+
geom_line(aes(x=Time, y = gyoy, color="#FC4E07"), size =1.2, alpha=0.5)+
scale_color_discrete(name = "Time series",labels = c("Growth rate (year)", "Growth rate (quarter)"))+
theme_minimal()+ ylab("%")
ggplot(data = dt.ts) +
geom_line(aes(x=Time, y = gyqoq, color="#E7B800"), size =1.2, alpha=0.5)
ggplot(data = dt.ts) +
geom_line(aes(x=Time, y = gyqoq, color="#E7B800"), size =1.2, alpha=0.5)+
geom_line(aes(x=Time, y = gyoy, color="#FC4E07"), size =1.2, alpha=0.5)+
scale_color_discrete(name = "Time series",labels = c("Growth rate (year)", "Growth rate (quarter)"))+
theme_minimal()+ ylab("%")
ggplot(data = dt.ts) +
geom_line(aes(x=Time, y = gyqoq, color="#E7B800"), size =1.2, alpha=0.5)+
geom_line(aes(x=Time, y = gyoy, color="#FC4E07"), size =1.2, alpha=0.5)+
scale_color_discrete(name = "Time series",labels = c("Growth rate (quarter)", "Growth rate (year)"))+
theme_minimal()+ ylab("%")
ggplot(data = dt.ts) +
geom_line(aes(x=Time, y = gyqoq, color="#E7B800"), size =1.2, alpha=0.5)+
geom_line(aes(x=Time, y = gyoy, color="#FC4E07"), size =1.2, alpha=0.5)+
scale_color_discrete(name = "Time series",labels = c("Growth rate (quarter)", "Growth rate (year)"))+
theme_minimal()+ ylab("%")
ggplot(data = dt.ts) +
geom_line(aes(x=Time, y = lngdp, color="#E7B800"), size =1.2, alpha=0.5)+
geom_line(aes(x=Time, y = trend, color="#FC4E07"), size =1.2, alpha=0.5)+
geom_line(aes(x=Time, y = xgap, color="#00AFBB"), size =1.2, alpha=0.5)+
scale_color_discrete(name = "Time series",labels = c("Policy rate", "Money market rate", "Gov. bond yield") )+
theme_minimal()+ ylab("%")
ggplot(data = dt.ts) +
geom_line(aes(x=Time, y = lngdp, color="#E7B800"), size =1.2, alpha=0.5)+
geom_line(aes(x=Time, y = trend, color="#FC4E07"), size =1.2, alpha=0.5)+
geom_line(aes(x=Time, y = xgap, color="#00AFBB"), size =1.2, alpha=0.5)+
scale_color_discrete(name = "Time series",labels = c("Output Gap", "ln of real GDP", "Trend of real GDP") )+
theme_minimal()+ ylab("%")
ggplot(data = dt.ts) +
geom_line(aes(x=Time, y = xgap, color="#00AFBB"), size =1.2, alpha=0.5)
ggplot(data = dt.ts) +
geom_line(aes(x=Time, y = lngdp, color="#E7B800"), size =1.2, alpha=0.5)+
geom_line(aes(x=Time, y = trend, color="#FC4E07"), size =1.2, alpha=0.5)+
scale_color_discrete(name = "Time series",labels = c( "ln of real GDP", "Trend of real GDP") )+
theme_minimal()+ ylab("%")
ggplot(data = dt.ts) +
geom_line(aes(x=Time, y = lngdp, color="#E7B800"), size =1.2, alpha=0.5)+
geom_line(aes(x=Time, y = trend, color="#FC4E07"), size =1.2, alpha=0.5)+
scale_color_discrete(name = "Time series",labels = c( "ln of real GDP", "Trend of real GDP") )+
theme_minimal()+ ylab(" ")
ggplot(data = dt.ts) +
geom_line(aes(x=Time, y = gyqoq, color="#E7B800"), size =1.2, alpha=0.5)+
geom_line(aes(x=Time, y = gyoy, color="#FC4E07"), size =1.2, alpha=0.5)+
geom_line(aes(x=Time, y = xgap, color="#00AFBB"), size =1.2, alpha=0.5)+
scale_color_discrete(name = "Time series",labels = c("Growth rate (quarter)", "Growth rate (year)", "Output Gap"))+
theme_minimal()+ ylab("%")
ggplot(data = dt.ts) +
geom_line(aes(x=Time, y = gyqoq, color="#E7B800"), size =1.2, alpha=0.5)+
geom_line(aes(x=Time, y = gyoy, color="#FC4E07"), size =1.2, alpha=0.5)+
scale_color_discrete(name = "Time series",labels = c("Growth rate (quarter)", "Growth rate (year)"))+
theme_minimal()+ ylab("%")
ggplot(data = dt.ts) +
geom_line(aes(x=Time, y = xgap, color="#00AFBB"), size =1.2, alpha=0.5)+
theme_minimal()+ ylab(" ")
ggplot(data = dt.ts) +
geom_line(aes(x=Time, y = xgap, color="#00AFBB"), size =1.2, alpha=0.5)+
scale_color_discrete(name = "Time series",labels = c( "Output Gap") )+
theme_minimal()+ ylab(" ")
a8<-adf.test(dt.ts$gyqoq) #to appendix
a8$type1
a9$type1
a9 <- adf.test(dt.ts$gyoy) #to appendix
a10 <- adf.test(dt.ts$lngdp) #to appendix
a11 <- adf.test(dt.ts$trend) #to appendix
a12 <- adf.test(dt.ts$xgap) #to appendix
a12$type1
dt.ts$gyqoq.deseas <- dt.ts$gyqoq - decompose(dt.ts$gyqoq)$seasonal
a8 <-adf.test(dt.ts$gyqoq.deseas) #to appendix
a9 <- adf.test(dt.ts$gyoy) #to appendix
dt.ts$gyoy.drift <- dt.ts$gyoy - as.numeric(coef(lm(dt.ts$gyoy~1)))
a9 <- adf.test(dt.ts$gyoy.drift) #to appendix
a9$type1
a10 <- adf.test(dt.ts$lngdp) #to appendix
a10 <- adf.test(dt.ts$lngdp) #to appendix
shiny::runApp('C:/Users/Lusine Zilfimian/OneDrive/Desktop/Vazgen')
runApp('C:/Users/Lusine Zilfimian/OneDrive/Desktop/Vazgen')
runApp('C:/Users/Lusine Zilfimian/OneDrive/Desktop/Vazgen')
install.packages("slickR")
library(slickR)
getwd
getwd()
setwd("C:/Users/Lusine Zilfimian/OneDrive/Desktop/Vazgen")
runApp()
runApp()
imgs <- list.files("C:/Users/Lusine Zilfimian/OneDrive/Desktop/Vazgen/methods", pattern=".png", full.names = TRUE)
runApp()
runApp()
dist(x)
index <- read.csv("index2017.csv")
rownames(index) <- index$Abbr
index
str(index)
rownames(index) <- index$Abbr
index1 <- index[1:7, c("Unemployment", "GDP.per.Capita.PPP")]
d <- dist(index1, method = "euclidian")
d
cl <- hclust(d, method = "complete")
cl$merge
index1
d
cl$height
plot(cl, hang = -1)
rect.hclust(cl,3)
plot(cl, hang = -1)
rect.hclust(cl,3)
index1
index1$cl.memb <- cutree(cl, k=3)
index1
set.seed(2708)
x=matrix(rnorm (50*2), ncol=2)
# truly are two clusters in the data
x[1:25,1]=x[1:25,1]+3
x[1:25,2]=x[1:25,2]-4
km.out=kmeans(x,2) #perfectly separated the observations
km.out$cluster
km.out=kmeans(x,2) #perfectly separated the observations
names(km.out)
km.out$cluster
km.out$centers
km.out=kmeans(x,3)
km.out$cluster
km.out$centers
# variance
km.out$totss
sum(km.out$withinss) + km.out$betweenss
km.out$withinss
km.out$betweenss
km.out$betweenss/km.out$totss #how good
fviz_nbclust(km.out)
x=matrix(rnorm (50*2), ncol=2)
x
runApp()
runApp('C:/Users/Lusine Zilfimian/OneDrive/Desktop/MH_DM_PA/Lesson 1-Data Visualization/Pss1/lusinedelete')
shiny::runApp()
runApp()
library(shiny)
library(slickR)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
####
),
mainPanel(
slickROutput("slickr", width="500px")
)
)
)
server <- function(input, output) {
output$slickr <- renderSlickR({
imgs <- list.files("vazgen111/barplot1", pattern=".png", full.names = TRUE)
slickR(imgs)
})
}
# Run the application
shinyApp(ui = ui, server = server)
getwd()
runApp()
library(shiny)
library(slickR)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
####
),
mainPanel(
slickROutput("slickr", width="500px")
)
)
)
server <- function(input, output) {
output$slickr <- renderSlickR({
imgs <- list.files("barplot1", pattern=".png", full.names = TRUE)
slickR(imgs)
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(slickR)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
####
),
mainPanel(
slickROutput("slickr", width="500px")
)
)
)
server <- function(input, output) {
output$slickr <- renderSlickR({
imgs <- list.files(path = "vazgen111", pattern=".png", full.names = TRUE)
slickR(imgs)
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(slickR)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
####
),
mainPanel(
slickROutput("slickr", width="500px")
)
)
)
server <- function(input, output) {
output$slickr <- renderSlickR({
imgs <- list.files(path = "slides", pattern=".png", full.names = TRUE)
slickR(imgs)
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(slickR)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
####
),
mainPanel(
slickROutput("slickr", width="500px")
)
)
)
server <- function(input, output) {
output$slickr <- renderSlickR({
imgs <- list.files(path = "slides", pattern=".png", full.names = TRUE)
slickR(imgs)
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(slickR)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
####
),
mainPanel(
slickROutput("slickr", width="500px")
)
)
)
server <- function(input, output) {
output$slickr <- renderSlickR({
imgs <- list.files(path = "slides", pattern=".PNG", full.names = TRUE)
slickR(imgs)
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(slickR)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
####
),
mainPanel(
slickROutput("slickr", width="1000px")
)
)
)
server <- function(input, output) {
output$slickr <- renderSlickR({
imgs <- list.files(path = "slides", pattern=".PNG", full.names = TRUE)
slickR(imgs)
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(slickR)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
####
),
mainPanel(
slickROutput("slickr", width="1000px")
)
)
)
server <- function(input, output) {
output$slickr <- renderSlickR({
imgs <- list.files(path = "slides", pattern=".PNG", full.names = TRUE)
slickR(imgs)
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(slickR)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
####
),
mainPanel(
slickROutput("slickr", width="2000px")
)
)
)
server <- function(input, output) {
output$slickr <- renderSlickR({
imgs <- list.files(path = "slides", pattern=".PNG", full.names = TRUE)
slickR(imgs)
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(slickR)
ui <- fluidPage(
sidebarLayout(
mainPanel(
slickROutput("slickr", width="2000px")
)
)
)
server <- function(input, output) {
output$slickr <- renderSlickR({
imgs <- list.files(path = "slides", pattern=".PNG", full.names = TRUE)
slickR(imgs)
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(slickR)
ui <- fluidPage(
sidebarLayout(
slickROutput("slickr", width="2000px")
)
)
server <- function(input, output) {
output$slickr <- renderSlickR({
imgs <- list.files(path = "slides", pattern=".PNG", full.names = TRUE)
slickR(imgs)
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(slickR)
ui <- fluidPage(
sidebarLayout(
slickROutput("slickr", width="1250px")
)
)
server <- function(input, output) {
output$slickr <- renderSlickR({
imgs <- list.files(path = "slides", pattern=".PNG", full.names = TRUE)
slickR(imgs)
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shinyjs)
runApp()
runApp()
runApp()
runApp()
runApp()
